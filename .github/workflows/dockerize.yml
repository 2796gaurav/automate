name: Docker Image CI

on:
  [issue_comment]
#   # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    if: contains(github.event.comment.html_url, '/dockerize')

   
    steps:

      # - name: ChatOps For Pull Requests
      #   uses: machine-learning-apps/actions-chatops@1.41
      #   with:
      #     TRIGGER_PHRASE: "/dockerize"
      #   env: # you must supply GITHUB_TOKEN
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v2
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 
          
          #ap-south-1
      - name: Initialize Terraform
        run: |
            cd terraform/ecr_repo && terraform init
            #terraform init -input=false         

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd terraform/ecr_repo && terraform plan
          #terraform plan -input=false -no-color       
          
      - name: Apply Terraform
        id: apply
        continue-on-error: true
        run: |
          cd terraform/ecr_repo && terraform apply -auto-approve

      - name: AWS Plan Copy
        #if: github.event_name == 'push' && steps.apply.outcome == 'success'
        run: aws s3 cp terraform/ecr_repo/terraform.tfstate s3://gauravyolo/container-log-${{ env.ENVIRONMENT }}.tfstate
        id: copy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          #terraform plan -input=false -no-color     

      # - name: Post Plan to GitHub PR
      #   uses: mshick/add-pr-comment@v1
      #   with:
      #     allow-repeats: true
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     repo-token-user-login: 'github-actions[bot]'
      #     message: |
      #       ## ${{ matrix.path }} plan
      #       ```
      #       hello
      #       ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
      #       ``` 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: deploy_test
          IMAGE_TAG: latest
        run: |
          echo $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
